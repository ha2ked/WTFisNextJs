{
  "version": 3,
  "sources": ["../../../src/components/checkbox.tsx"],
  "sourcesContent": ["'use client';\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport * as CheckboxPrimitive from '@radix-ui/react-checkbox';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\n\nimport { checkboxPropDefs } from './checkbox.props.js';\nimport { ThickCheckIcon, ThickDividerHorizontalIcon } from './icons.js';\nimport { extractProps } from '../helpers/extract-props.js';\nimport { marginPropDefs } from '../props/margin.props.js';\n\nimport type { MarginProps } from '../props/margin.props.js';\nimport type { ComponentPropsWithout } from '../helpers/component-props.js';\nimport type { GetPropDefTypes } from '../props/prop-def.js';\n\ntype CheckboxElement = React.ElementRef<typeof CheckboxPrimitive.Root>;\ntype CheckboxOwnProps = GetPropDefTypes<typeof checkboxPropDefs>;\ninterface CheckboxProps\n  extends ComponentPropsWithout<\n      typeof CheckboxPrimitive.Root,\n      'asChild' | 'color' | 'defaultValue' | 'children'\n    >,\n    MarginProps,\n    CheckboxOwnProps {}\nconst Checkbox = React.forwardRef<CheckboxElement, CheckboxProps>((props, forwardedRef) => {\n  const {\n    className,\n    color,\n    checked: checkedProp,\n    defaultChecked: defaultCheckedProp,\n    onCheckedChange,\n    ...checkboxProps\n  } = extractProps(props, checkboxPropDefs, marginPropDefs);\n\n  const [checked, setChecked] = useControllableState({\n    prop: checkedProp,\n    defaultProp: defaultCheckedProp,\n    onChange: onCheckedChange,\n  });\n\n  return (\n    <CheckboxPrimitive.Root\n      data-accent-color={color}\n      {...checkboxProps}\n      defaultChecked={defaultCheckedProp}\n      checked={checked}\n      onCheckedChange={setChecked}\n      asChild={false}\n      ref={forwardedRef}\n      className={classNames('rt-reset', 'rt-BaseCheckboxRoot', 'rt-CheckboxRoot', className)}\n    >\n      <CheckboxPrimitive.Indicator\n        asChild\n        className=\"rt-BaseCheckboxIndicator rt-CheckboxIndicator\"\n      >\n        {checked === 'indeterminate' ? <ThickDividerHorizontalIcon /> : <ThickCheckIcon />}\n      </CheckboxPrimitive.Indicator>\n    </CheckboxPrimitive.Root>\n  );\n});\nCheckbox.displayName = 'Checkbox';\n\nexport { Checkbox };\nexport type { CheckboxProps };\n"],
  "mappings": "ukBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,cAAAE,IAAA,eAAAC,EAAAH,GAEA,IAAAI,EAAuB,oBACvBC,EAAuB,yBACvBC,EAAmC,uCACnCC,EAAqC,kDAErCC,EAAiC,+BACjCC,EAA2D,sBAC3DC,EAA6B,uCAC7BC,EAA+B,oCAe/B,MAAMT,EAAWE,EAAM,WAA2C,CAACQ,EAAOC,IAAiB,CACzF,KAAM,CACJ,UAAAC,EACA,MAAAC,EACA,QAASC,EACT,eAAgBC,EAChB,gBAAAC,EACA,GAAGC,CACL,KAAI,gBAAaP,EAAO,mBAAkB,gBAAc,EAElD,CAACQ,EAASC,CAAU,KAAI,wBAAqB,CACjD,KAAML,EACN,YAAaC,EACb,SAAUC,CACZ,CAAC,EAED,OACEd,EAAA,cAACE,EAAkB,KAAlB,CACC,oBAAmBS,EAClB,GAAGI,EACJ,eAAgBF,EAChB,QAASG,EACT,gBAAiBC,EACjB,QAAS,GACT,IAAKR,EACL,aAAW,EAAAS,SAAW,WAAY,sBAAuB,kBAAmBR,CAAS,GAErFV,EAAA,cAACE,EAAkB,UAAlB,CACC,QAAO,GACP,UAAU,iDAEqBF,EAAA,cAA9BgB,IAAY,gBAAmB,6BAAiC,iBAAjC,IAA2B,CAC7D,CACF,CAEJ,CAAC,EACDlB,EAAS,YAAc",
  "names": ["checkbox_exports", "__export", "Checkbox", "__toCommonJS", "React", "import_classnames", "CheckboxPrimitive", "import_react_use_controllable_state", "import_checkbox_props", "import_icons", "import_extract_props", "import_margin_props", "props", "forwardedRef", "className", "color", "checkedProp", "defaultCheckedProp", "onCheckedChange", "checkboxProps", "checked", "setChecked", "classNames"]
}
